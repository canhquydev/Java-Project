/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import CRUD.ConnectSQL;
import CRUD.layDuLieuSQL;
import Object.KhuyenMai;
import Object.NhomMonAn;
import com.formdev.flatlaf.extras.FlatSVGIcon;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
public class tabQuanLyKhuyenMai extends javax.swing.JPanel {
    DefaultTableModel tableModel, model;
    int selected = -1;
    layDuLieuSQL layDuLieu = new layDuLieuSQL();
    public tabQuanLyKhuyenMai() {
        initComponents();
        layDuLieu();
        FlatSVGIcon iconAdd = new FlatSVGIcon("Images/add.svg", 25, 25);
        btnThemKhuyenMai.setIcon(iconAdd);
        FlatSVGIcon iconDel = new FlatSVGIcon("Images/delete.svg", 25, 25);
        btnXoaKhuyenMai.setIcon(iconDel);
        FlatSVGIcon iconChange = new FlatSVGIcon("Images/edit.svg", 25, 25);
        btnSuaKhuyenMai.setIcon(iconChange);
        FlatSVGIcon iconAdd1 = new FlatSVGIcon("Images/add.svg", 25, 25);
        btnThemNhom.setIcon(iconAdd1);
        FlatSVGIcon iconDel1 = new FlatSVGIcon("Images/delete.svg", 25, 25);
        btnXoaNhom.setIcon(iconDel1);
        FlatSVGIcon iconChange1 = new FlatSVGIcon("Images/edit.svg", 25, 25);
        btnSuaNhom.setIcon(iconChange1);
        tbKhuyenMai.setShowGrid(true);
        tbKhuyenMai.setGridColor(new Color(224, 224, 224));
        tbNhomMonAn.setShowGrid(true);
        tbNhomMonAn.setGridColor(new Color(224, 224, 224));
    }
    public void layDuLieu(){
        tableModel = new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; 
            }
        };
        model = new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; 
            }
        };
        
        tableModel.addColumn("Mã khuyến mãi");
        tableModel.addColumn("Tên khuyến mãi");
        tableModel.addColumn("Phần trăm giảm giá");
        tableModel.addColumn("Mô tả");
        
        for(KhuyenMai km: layDuLieu.getDsKhuyenMai()){
            tableModel.addRow(new Object[]{
                km.getMaKhuyenMai(),
                km.getTenKhuyenMai(),
                km.getPhanTramGiamGia(),
                km.getMoTa()
            });
        }
        tbKhuyenMai.setModel(tableModel);
        
        model.addColumn("Mã nhóm món ăn");
        model.addColumn("Tên nhóm món ăn");
        
        for(NhomMonAn nm: layDuLieu.getDsNhomMonAn()){
            model.addRow(new Object[]{
                nm.getMaNhom(),
                nm.getTenNhom()
            });
        }
        tbNhomMonAn.setModel(model);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private boolean kiemTraDuLieuKhuyenMai() {
        String tenKM = txtTenKhuyenMai.getText().trim();
        String phanTramStr = txtPhanTramGiamGia.getText().trim();

        if (tenKM.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Tên khuyến mãi không được để trống!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (phanTramStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Phần trăm giảm giá không được để trống!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        try {
            int phanTram = Integer.parseInt(phanTramStr);
            if (phanTram < 0 || phanTram > 100) {
                JOptionPane.showMessageDialog(this, "Phần trăm giảm giá phải là một số từ 0 đến 100!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Phần trăm giảm giá phải là một số nguyên hợp lệ!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        // Mô tả có thể để trống nên không cần kiểm tra
        return true;
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sqlDateModel1 = new org.jdatepicker.impl.SqlDateModel();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtTenNhom = new javax.swing.JTextField();
        btnThemNhom = new javax.swing.JButton();
        btnSuaNhom = new javax.swing.JButton();
        btnXoaNhom = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbNhomMonAn = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtTenKhuyenMai = new javax.swing.JTextField();
        txtPhanTramGiamGia = new javax.swing.JTextField();
        btnThemKhuyenMai = new javax.swing.JButton();
        btnSuaKhuyenMai = new javax.swing.JButton();
        btnXoaKhuyenMai = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbKhuyenMai = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        txtMoTa = new javax.swing.JTextField();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Nhóm món ăn", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 3, 14))); // NOI18N

        jLabel4.setText("Tên nhóm:");

        btnThemNhom.setBackground(new java.awt.Color(51, 204, 255));
        btnThemNhom.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnThemNhom.setText("Thêm nhóm");
        btnThemNhom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemNhomActionPerformed(evt);
            }
        });

        btnSuaNhom.setBackground(new java.awt.Color(51, 204, 255));
        btnSuaNhom.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSuaNhom.setText("Sửa nhóm");
        btnSuaNhom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaNhomActionPerformed(evt);
            }
        });

        btnXoaNhom.setBackground(new java.awt.Color(51, 204, 255));
        btnXoaNhom.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnXoaNhom.setText("Xoá nhóm");
        btnXoaNhom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaNhomActionPerformed(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Danh Sách ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 3, 14))); // NOI18N

        tbNhomMonAn.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbNhomMonAn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbNhomMonAnMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbNhomMonAn);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(txtTenNhom))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnThemNhom, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                        .addComponent(btnSuaNhom, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(17, 17, 17))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addComponent(btnXoaNhom, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtTenNhom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnThemNhom)
                    .addComponent(btnSuaNhom))
                .addGap(23, 23, 23)
                .addComponent(btnXoaNhom)
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Khuyến mãi", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 3, 14))); // NOI18N

        jLabel2.setText("Giảm giá(%):");

        btnThemKhuyenMai.setBackground(new java.awt.Color(51, 204, 255));
        btnThemKhuyenMai.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnThemKhuyenMai.setText("Thêm khuyến mãi");
        btnThemKhuyenMai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemKhuyenMaiActionPerformed(evt);
            }
        });

        btnSuaKhuyenMai.setBackground(new java.awt.Color(51, 204, 255));
        btnSuaKhuyenMai.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSuaKhuyenMai.setText("Sửa khuyến mãi");
        btnSuaKhuyenMai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaKhuyenMaiActionPerformed(evt);
            }
        });

        btnXoaKhuyenMai.setBackground(new java.awt.Color(51, 204, 255));
        btnXoaKhuyenMai.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnXoaKhuyenMai.setText("Xoá khuyến mãi");
        btnXoaKhuyenMai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaKhuyenMaiActionPerformed(evt);
            }
        });

        jLabel1.setText("Tên khuyến mãi:");

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Danh sách khuyến mãi", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 3, 14))); // NOI18N

        tbKhuyenMai.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbKhuyenMai.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbKhuyenMaiMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbKhuyenMai);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE))
        );

        jLabel3.setText("Mô tả:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(57, 57, 57)
                        .addComponent(txtMoTa))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(btnThemKhuyenMai, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSuaKhuyenMai, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnXoaKhuyenMai, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTenKhuyenMai)
                            .addComponent(txtPhanTramGiamGia))))
                .addGap(20, 20, 20))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTenKhuyenMai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPhanTramGiamGia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMoTa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnXoaKhuyenMai)
                    .addComponent(btnThemKhuyenMai)
                    .addComponent(btnSuaKhuyenMai))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnThemNhomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemNhomActionPerformed
        // TODO add your handling code here:
        String tenNhom = txtTenNhom.getText().trim();
        if (tenNhom.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Tên nhóm món ăn không được để trống!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String sql = "{call sp_ThemNhomMonAn(?)}"; 
        try (Connection conn = CRUD.ConnectSQL.getConnection(); 
             CallableStatement cs = conn.prepareCall(sql)) {

            cs.setString(1, tenNhom);

            cs.execute();
            JOptionPane.showMessageDialog(this, "Thêm nhóm món ăn thành công!");
            layDuLieu();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi thêm nhóm món ăn: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
//        String sql = "INSERT INTO NHOMMONAN (tenNhom) VALUES (?)";
//        try (Connection conn = ConnectSQL.getConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {
//            ps.setString(1, tenNhom);
//            int result = ps.executeUpdate();
//            if (result > 0) {
//                JOptionPane.showMessageDialog(this, "Thêm nhóm món ăn thành công!");
//                layDuLieu();
//                txtTenNhom.setText("");
//            }
//        } catch (SQLException ex) {
//            JOptionPane.showMessageDialog(this, "Lỗi khi thêm nhóm món ăn: " + ex.getMessage(), "Lỗi SQL", JOptionPane.ERROR_MESSAGE);
//        }
    }//GEN-LAST:event_btnThemNhomActionPerformed

    private void btnSuaNhomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaNhomActionPerformed
        // TODO add your handling code here:
        int selectedRow = tbNhomMonAn.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một nhóm món ăn để sửa!", "Lỗi", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String tenNhom = txtTenNhom.getText().trim();
        if (tenNhom.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Tên nhóm món ăn không được để trống!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int maNhom = (int) tbNhomMonAn.getValueAt(selectedRow, 0);
        String sql = "{call sp_SuaNhomMonAn(?, ?)}"; 
        try (Connection conn = CRUD.ConnectSQL.getConnection(); 
             CallableStatement cs = conn.prepareCall(sql)) {

            cs.setInt(1, maNhom);
            cs.setString(2, tenNhom);

            cs.execute();
            JOptionPane.showMessageDialog(this, "Cập nhật nhóm món ăn thành công!");
            layDuLieu();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật nhóm món ăn: " + ex.getMessage(), "Lỗi SQL", JOptionPane.ERROR_MESSAGE);
        }
//        String sql = "UPDATE NHOMMONAN SET tenNhom = ? WHERE maNhom = ?";
//        try (Connection conn = ConnectSQL.getConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {
//            ps.setString(1, tenNhom);
//            ps.setInt(2, maNhom);
//            int result = ps.executeUpdate();
//            if (result > 0) {
//                JOptionPane.showMessageDialog(this, "Cập nhật nhóm món ăn thành công!");
//                layDuLieu();
//            }
//        } catch (SQLException ex) {
//            JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật nhóm món ăn: " + ex.getMessage(), "Lỗi SQL", JOptionPane.ERROR_MESSAGE);
//        }
    }//GEN-LAST:event_btnSuaNhomActionPerformed

    private void btnXoaNhomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaNhomActionPerformed
        // TODO add your handling code here:
        int selectedRow = tbNhomMonAn.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một nhóm món ăn để xóa!", "Lỗi", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa nhóm này?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        int maNhom = (int) tbNhomMonAn.getValueAt(selectedRow, 0);
        
        String sql = "{call sp_XoaNhomMonAn(?)}"; 
        try (Connection conn = CRUD.ConnectSQL.getConnection(); 
             CallableStatement cs = conn.prepareCall(sql)) {

            cs.setInt(1, maNhom);

            cs.execute();
            JOptionPane.showMessageDialog(this, "Xóa nhóm món ăn thành công!");
            layDuLieu();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi xóa nhóm món ăn: " + ex.getMessage(), "Lỗi SQL", JOptionPane.ERROR_MESSAGE);
        }
        
//        try (Connection conn = ConnectSQL.getConnection()) {
//            // Kiểm tra xem nhóm có chứa món ăn nào không
//            String checkSql = "SELECT COUNT(*) FROM MONAN WHERE maNhom = ?";
//            try(PreparedStatement psCheck = conn.prepareStatement(checkSql)) {
//                psCheck.setInt(1, maNhom);
//                ResultSet rs = psCheck.executeQuery();
//                if (rs.next() && rs.getInt(1) > 0) {
//                    JOptionPane.showMessageDialog(this, "Không thể xóa! Nhóm này đang chứa các món ăn.", "Xóa bị chặn", JOptionPane.ERROR_MESSAGE);
//                    return;
//                }
//            }
//
//            // Nếu không, tiến hành xóa
//            String deleteSql = "DELETE FROM NHOMMONAN WHERE maNhom = ?";
//            try(PreparedStatement psDelete = conn.prepareStatement(deleteSql)) {
//                psDelete.setInt(1, maNhom);
//                int result = psDelete.executeUpdate();
//                if (result > 0) {
//                    JOptionPane.showMessageDialog(this, "Xóa nhóm món ăn thành công!");
//                    layDuLieu();
//                    txtTenNhom.setText("");
//                }
//            }
//        } catch (SQLException ex) {
//            JOptionPane.showMessageDialog(this, "Lỗi khi xóa nhóm món ăn: " + ex.getMessage(), "Lỗi SQL", JOptionPane.ERROR_MESSAGE);
//        }
    }//GEN-LAST:event_btnXoaNhomActionPerformed

    private void tbNhomMonAnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbNhomMonAnMouseClicked
        // TODO add your handling code here:
        int row = tbNhomMonAn.getSelectedRow();
        if (row >= 0) {
            txtTenNhom.setText(tbNhomMonAn.getValueAt(row, 1).toString());
        }
    }//GEN-LAST:event_tbNhomMonAnMouseClicked

    private void btnThemKhuyenMaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemKhuyenMaiActionPerformed
        // TODO add your handling code here:
        if (!kiemTraDuLieuKhuyenMai()) {
            return;
        }

        String tenKM = txtTenKhuyenMai.getText().trim();
        int phanTram = Integer.parseInt(txtPhanTramGiamGia.getText().trim());
        String moTa = txtMoTa.getText().trim();
        
        String sql = "{call sp_ThemKhuyenMai(?, ?, ?)}"; 
        try (Connection conn = CRUD.ConnectSQL.getConnection(); 
             CallableStatement cs = conn.prepareCall(sql)) {

            cs.setString(1, tenKM);
            cs.setInt(2, phanTram);
            cs.setString(3, moTa);

            cs.execute();
            JOptionPane.showMessageDialog(this, "Thêm khuyến mãi thành công!");
            layDuLieu();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi thêm khuyến mãi: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
//        String sql = "INSERT INTO KHUYENMAI (TenKhuyenMai, PhanTramGiamGia, MoTa) VALUES (?, ?, ?)";
//
//        try (Connection conn = ConnectSQL.getConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {
//            ps.setString(1, tenKM);
//            ps.setInt(2, phanTram);
//            ps.setString(3, moTa);
//
//            int result = ps.executeUpdate();
//            if (result > 0) {
//                JOptionPane.showMessageDialog(this, "Thêm khuyến mãi thành công!");
//                layDuLieu(); // Tải lại bảng
//            }
//        } catch (SQLException ex) {
//            JOptionPane.showMessageDialog(this, "Lỗi khi thêm khuyến mãi: " + ex.getMessage(), "Lỗi SQL", JOptionPane.ERROR_MESSAGE);
//        }
    }//GEN-LAST:event_btnThemKhuyenMaiActionPerformed

    private void btnSuaKhuyenMaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaKhuyenMaiActionPerformed
        // TODO add your handling code here:
        int selectedRow = tbKhuyenMai.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một khuyến mãi để sửa!", "Lỗi", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (!kiemTraDuLieuKhuyenMai()) {
            return;
        }

        int maKM = (int) tbKhuyenMai.getValueAt(selectedRow, 0);
        String tenKM = txtTenKhuyenMai.getText().trim();
        int phanTram = Integer.parseInt(txtPhanTramGiamGia.getText().trim());
        String moTa = txtMoTa.getText().trim();
        
        String sql = "{call sp_SuaKhuyenMai(?, ?, ?, ?)}"; 
        try (Connection conn = CRUD.ConnectSQL.getConnection(); 
             CallableStatement cs = conn.prepareCall(sql)) {

            cs.setString(1, tenKM);
            cs.setInt(2, phanTram);
            cs.setString(3, moTa);
            cs.setInt(4, maKM);

            cs.execute();
            JOptionPane.showMessageDialog(this, "Cập nhật khuyến mãi thành công!");
            layDuLieu();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật khuyến mãi: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
//        String sql = "UPDATE KHUYENMAI SET TenKhuyenMai = ?, PhanTramGiamGia = ?, MoTa = ? WHERE MaKhuyenMai = ?";
//
//        try (Connection conn = ConnectSQL.getConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {
//            ps.setString(1, tenKM);
//            ps.setInt(2, phanTram);
//            ps.setString(3, moTa);
//            ps.setInt(4, maKM);
//
//            int result = ps.executeUpdate();
//            if (result > 0) {
//                JOptionPane.showMessageDialog(this, "Cập nhật khuyến mãi thành công!");
//                layDuLieu();
//            }
//        } catch (SQLException ex) {
//            JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật khuyến mãi: " + ex.getMessage(), "Lỗi SQL", JOptionPane.ERROR_MESSAGE);
//        }
    }//GEN-LAST:event_btnSuaKhuyenMaiActionPerformed

    private void btnXoaKhuyenMaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaKhuyenMaiActionPerformed
        // TODO add your handling code here:
        int selectedRow = tbKhuyenMai.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một khuyến mãi để xóa!", "Lỗi", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa khuyến mãi này?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        int maKM = (int) tbKhuyenMai.getValueAt(selectedRow, 0);
        
        String sql = "{call sp_XoaKhuyenMai(?)}"; 
        try (Connection conn = CRUD.ConnectSQL.getConnection(); 
             CallableStatement cs = conn.prepareCall(sql)) {

            cs.setInt(1, maKM);

            cs.execute();
            JOptionPane.showMessageDialog(this, "Xóa khuyến mãi thành công!");
            layDuLieu();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi xóa khuyến mãi: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
//        try (Connection conn = ConnectSQL.getConnection()) {
//            // Kiểm tra xem khuyến mãi có đang được áp dụng cho hóa đơn nào không
//            String checkSql = "SELECT COUNT(*) FROM HOADON WHERE maKhuyenMai = ?";
//            try (PreparedStatement psCheck = conn.prepareStatement(checkSql)) {
//                psCheck.setInt(1, maKM);
//                ResultSet rs = psCheck.executeQuery();
//                if (rs.next() && rs.getInt(1) > 0) {
//                    JOptionPane.showMessageDialog(this, "Không thể xóa! Khuyến mãi này đang được áp dụng cho các hóa đơn.", "Xóa bị chặn", JOptionPane.ERROR_MESSAGE);
//                    return;
//                }
//            }
//
//            // Nếu không, tiến hành xóa
//            String deleteSql = "DELETE FROM KHUYENMAI WHERE MaKhuyenMai = ?";
//            try (PreparedStatement psDelete = conn.prepareStatement(deleteSql)) {
//                psDelete.setInt(1, maKM);
//                int result = psDelete.executeUpdate();
//                if (result > 0) {
//                    JOptionPane.showMessageDialog(this, "Xóa khuyến mãi thành công!");
//                    layDuLieu();
//                }
//            }
//
//        } catch (SQLException ex) {
//            JOptionPane.showMessageDialog(this, "Lỗi khi xóa khuyến mãi: " + ex.getMessage(), "Lỗi SQL", JOptionPane.ERROR_MESSAGE);
//        }
    }//GEN-LAST:event_btnXoaKhuyenMaiActionPerformed

    private void tbKhuyenMaiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbKhuyenMaiMouseClicked
        // TODO add your handling code here:
        selected = tbKhuyenMai.getSelectedRow();
        if (selected >= 0) {
            txtTenKhuyenMai.setText(tbKhuyenMai.getValueAt(selected, 1).toString());
            txtPhanTramGiamGia.setText(tbKhuyenMai.getValueAt(selected, 2).toString());
            if(tbKhuyenMai.getValueAt(selected, 3) != null) {
                txtMoTa.setText(tbKhuyenMai.getValueAt(selected, 3).toString());
            } else {
                txtMoTa.setText("");
            }
        }
    }//GEN-LAST:event_tbKhuyenMaiMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSuaKhuyenMai;
    private javax.swing.JButton btnSuaNhom;
    private javax.swing.JButton btnThemKhuyenMai;
    private javax.swing.JButton btnThemNhom;
    private javax.swing.JButton btnXoaKhuyenMai;
    private javax.swing.JButton btnXoaNhom;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private org.jdatepicker.impl.SqlDateModel sqlDateModel1;
    private javax.swing.JTable tbKhuyenMai;
    private javax.swing.JTable tbNhomMonAn;
    private javax.swing.JTextField txtMoTa;
    private javax.swing.JTextField txtPhanTramGiamGia;
    private javax.swing.JTextField txtTenKhuyenMai;
    private javax.swing.JTextField txtTenNhom;
    // End of variables declaration//GEN-END:variables
}
