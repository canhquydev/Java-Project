/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import CRUD.ConnectSQL;
import CRUD.layDuLieuSQL;
import Object.NhanVien;
import com.formdev.flatlaf.extras.FlatSVGIcon;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HoCanhQuy
 */
public class tabQuanLyNhanVien extends javax.swing.JPanel {

    /**
     * Creates new form tabQuanLyNhanVien
     */
    DefaultTableModel model;
    int selectedRow = -1;
    layDuLieuSQL layDuLieu = new layDuLieuSQL();
    public tabQuanLyNhanVien() {
        initComponents();
        layDuLieu();
        FlatSVGIcon iconAdd = new FlatSVGIcon("Images/add.svg", 25, 25);
        btnThemNhanVien.setIcon(iconAdd);
        FlatSVGIcon iconDel = new FlatSVGIcon("Images/delete.svg", 25, 25);
        btnXoaNhanVien.setIcon(iconDel);
        FlatSVGIcon iconChange = new FlatSVGIcon("Images/edit.svg", 25, 25);
        btnSuaNhanVien.setIcon(iconChange);
        FlatSVGIcon iconRefresh = new FlatSVGIcon("Images/refresh.svg", 25, 25);
        btnLamMoi.setIcon(iconRefresh);
        tableNhanVien.setShowGrid(true);
        tableNhanVien.setGridColor(new Color(224, 224, 224));
    }

    public void layDuLieu(){
        model = new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; 
            }
        };
        model.addColumn("Mã nhân viên");
        model.addColumn("Họ tên");
        model.addColumn("Ngày sinh");
        model.addColumn("Giới tính");
        model.addColumn("Số điện thoại");
        model.addColumn("Địa chỉ");
        model.addColumn("Chức vụ");
        model.addColumn("Mã quản lý");
        model.addColumn("Lương cơ bản");
        for(NhanVien nv : layDuLieu.getDsNhanVien()){
            long lcb = (long) nv.getLuongCoBan();
            model.addRow(new Object[]{
                nv.getMaNhanVien(),
                nv.getHoTen(),
                nv.getNgaySinh(),
                nv.getGioiTinh(),
                nv.getSoDienThoai(),
                nv.getDiaChi(),
                nv.getChucVu(),
                nv.getMaQuanLy(),
                lcb
            });
        }
        
        tableNhanVien.setModel(model);
        cbGioiTinh.removeAllItems();
        cbGioiTinh.addItem("Chọn giới tính");
        cbGioiTinh.addItem("Nam");
        cbGioiTinh.addItem("Nữ");
        Set<String> set = new HashSet<>();
        for(NhanVien nv : layDuLieu.getDsNhanVien()){
            set.add(nv.getChucVu().trim());
        }
        cbChucVu.removeAllItems();
        cbChucVu.addItem("Chọn chức vụ");
        for(String s: set){
            cbChucVu.addItem(s);
        }
        
        cbNguoiQuanLy.removeAllItems();
        cbNguoiQuanLy.addItem("");
        for(NhanVien nv : layDuLieu.getDsNhanVien()){
            if((nv.getChucVu().trim().equals("Quản lý nhân sự")) || (nv.getChucVu().trim().equals("Quản lý kho và bếp"))){
                cbNguoiQuanLy.addItem(nv.getHoTen());
            }
        }
    }
    public boolean checked(){
    if(txtHoTen.getText().trim().isEmpty()){
        return false;
    }
    if(txtNgaySinh.getDate() == null){ 
        return false;
    }
    if(txtSoDienThoai.getText().trim().isEmpty()){
        return false;
    }
    if(txtDiaChi.getText().trim().isEmpty()){
        return false;
    }
    if(cbChucVu.getSelectedIndex() <= 0){ 
        return false;
    }
    if(cbGioiTinh.getSelectedIndex() <= 0){ 
        return false;
    }
    if(txtLuongCoBan.getText().trim().isEmpty()){
        return false;
    }
    try {
        Integer.parseInt(txtLuongCoBan.getText().trim());
    } catch (NumberFormatException e) {
        return false; 
    }
    return true;
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnThongTinNhanVien = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtHoTen = new javax.swing.JTextField();
        txtSoDienThoai = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtDiaChi = new javax.swing.JTextField();
        txtLuongCoBan = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        cbNguoiQuanLy = new javax.swing.JComboBox<>();
        cbGioiTinh = new javax.swing.JComboBox<>();
        cbChucVu = new javax.swing.JComboBox<>();
        txtNgaySinh = new com.toedter.calendar.JDateChooser();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableNhanVien = new javax.swing.JTable();
        pnChucNang = new javax.swing.JPanel();
        btnThemNhanVien = new javax.swing.JButton();
        btnXoaNhanVien = new javax.swing.JButton();
        btnSuaNhanVien = new javax.swing.JButton();
        btnLamMoi = new javax.swing.JButton();

        pnThongTinNhanVien.setBackground(new java.awt.Color(255, 255, 255));
        pnThongTinNhanVien.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin nhân viên", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 3, 14))); // NOI18N

        jLabel3.setText("Giới tính:");

        jLabel4.setText("Chức vụ:");

        jLabel5.setText("Họ tên:");

        jLabel6.setText("Số điện thoại:");

        jLabel7.setText("Người quản lý:");

        jLabel8.setText("Ngày sinh:");

        jLabel9.setText("Địa chỉ:");

        jLabel10.setText("Lương cơ bản:");

        cbNguoiQuanLy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbGioiTinh.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbChucVu.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        txtNgaySinh.setDateFormatString("y-MM-dd");

        javax.swing.GroupLayout pnThongTinNhanVienLayout = new javax.swing.GroupLayout(pnThongTinNhanVien);
        pnThongTinNhanVien.setLayout(pnThongTinNhanVienLayout);
        pnThongTinNhanVienLayout.setHorizontalGroup(
            pnThongTinNhanVienLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnThongTinNhanVienLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(pnThongTinNhanVienLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnThongTinNhanVienLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(33, 33, 33)
                        .addComponent(txtDiaChi))
                    .addGroup(pnThongTinNhanVienLayout.createSequentialGroup()
                        .addGroup(pnThongTinNhanVienLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnThongTinNhanVienLayout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(txtNgaySinh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(pnThongTinNhanVienLayout.createSequentialGroup()
                                .addGroup(pnThongTinNhanVienLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5))
                                .addGap(25, 25, 25)
                                .addGroup(pnThongTinNhanVienLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtHoTen)
                                    .addComponent(cbGioiTinh, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(pnThongTinNhanVienLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnThongTinNhanVienLayout.createSequentialGroup()
                        .addGroup(pnThongTinNhanVienLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel4))
                        .addGap(23, 23, 23)
                        .addGroup(pnThongTinNhanVienLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtSoDienThoai)
                            .addComponent(cbChucVu, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnThongTinNhanVienLayout.createSequentialGroup()
                        .addGroup(pnThongTinNhanVienLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel10))
                        .addGap(18, 18, 18)
                        .addGroup(pnThongTinNhanVienLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtLuongCoBan)
                            .addComponent(cbNguoiQuanLy, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(12, 12, 12))
        );
        pnThongTinNhanVienLayout.setVerticalGroup(
            pnThongTinNhanVienLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnThongTinNhanVienLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnThongTinNhanVienLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtHoTen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtSoDienThoai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(pnThongTinNhanVienLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(cbGioiTinh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbChucVu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnThongTinNhanVienLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnThongTinNhanVienLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(jLabel7)
                        .addComponent(cbNguoiQuanLy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtNgaySinh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnThongTinNhanVienLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtDiaChi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(txtLuongCoBan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Danh Sách Nhân Viên", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 3, 14))); // NOI18N

        tableNhanVien.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "MaNhanVien", "HoTen", "NgaySinh", "GioiTinh", "SoDienThoai", "DiaChi", "ChucVu", "MaQuanLy", "LuongCoBan"
            }
        ));
        tableNhanVien.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableNhanVienMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableNhanVien);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 947, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 930, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 317, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE))
        );

        pnChucNang.setBackground(new java.awt.Color(255, 255, 255));
        pnChucNang.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Các thao tác", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 3, 14))); // NOI18N

        btnThemNhanVien.setBackground(new java.awt.Color(51, 204, 255));
        btnThemNhanVien.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnThemNhanVien.setText("Thêm nhân viên");
        btnThemNhanVien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemNhanVienActionPerformed(evt);
            }
        });

        btnXoaNhanVien.setBackground(new java.awt.Color(51, 204, 255));
        btnXoaNhanVien.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnXoaNhanVien.setText("Xóa nhân viên");
        btnXoaNhanVien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaNhanVienActionPerformed(evt);
            }
        });

        btnSuaNhanVien.setBackground(new java.awt.Color(51, 204, 255));
        btnSuaNhanVien.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSuaNhanVien.setText("Sửa thông tin");
        btnSuaNhanVien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaNhanVienActionPerformed(evt);
            }
        });

        btnLamMoi.setBackground(new java.awt.Color(51, 204, 255));
        btnLamMoi.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLamMoi.setText("Làm mới");
        btnLamMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLamMoiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnChucNangLayout = new javax.swing.GroupLayout(pnChucNang);
        pnChucNang.setLayout(pnChucNangLayout);
        pnChucNangLayout.setHorizontalGroup(
            pnChucNangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnChucNangLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(pnChucNangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnThemNhanVien, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                    .addComponent(btnXoaNhanVien, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnChucNangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLamMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSuaNhanVien, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40))
        );
        pnChucNangLayout.setVerticalGroup(
            pnChucNangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnChucNangLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(pnChucNangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnThemNhanVien)
                    .addComponent(btnSuaNhanVien))
                .addGap(18, 30, Short.MAX_VALUE)
                .addGroup(pnChucNangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnXoaNhanVien)
                    .addComponent(btnLamMoi))
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnThongTinNhanVien, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(pnChucNang, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnChucNang, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnThongTinNhanVien, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tableNhanVienMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableNhanVienMouseClicked
        // TODO add your handling code here:
        selectedRow = tableNhanVien.getSelectedRow();
        if(selectedRow >= 0){
            txtHoTen.setText(tableNhanVien.getValueAt(selectedRow, 1).toString());
            Date ngayTra = Date.valueOf(tableNhanVien.getValueAt(selectedRow, 2).toString());
            txtNgaySinh.setDate(ngayTra);
            cbGioiTinh.setSelectedItem(tableNhanVien.getValueAt(selectedRow, 3).toString().trim());
            txtSoDienThoai.setText(tableNhanVien.getValueAt(selectedRow, 4).toString());
            txtDiaChi.setText(tableNhanVien.getValueAt(selectedRow, 5).toString());
            cbChucVu.setSelectedItem(tableNhanVien.getValueAt(selectedRow, 6).toString());
            txtLuongCoBan.setText(tableNhanVien.getValueAt(selectedRow, 8).toString());
            int maQuanLy = Integer.parseInt(tableNhanVien.getValueAt(selectedRow, 7).toString());
            if(maQuanLy == 0){
                cbNguoiQuanLy.setSelectedItem("");
            }
            else{
                for(NhanVien nv : layDuLieu.getDsNhanVien()){
                    if(nv.getMaNhanVien() == maQuanLy){
                        cbNguoiQuanLy.setSelectedItem(nv.getHoTen());
                        return;
                    }
                }
            }

        }
    }//GEN-LAST:event_tableNhanVienMouseClicked

    private void btnThemNhanVienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemNhanVienActionPerformed
        // TODO add your handling code here:

        if (!checked()) {
            JOptionPane.showMessageDialog(this, "Yêu cầu nhập đầy đủ và chính xác thông tin!", "Lỗi đầu vào", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // 2. Lấy thông tin từ form
        String hoTen = txtHoTen.getText().trim();
        java.util.Date ngaySinhUtil = txtNgaySinh.getDate();
        String strNgaySinh = new java.sql.Date(ngaySinhUtil.getTime()).toString();
        String gioiTinh = cbGioiTinh.getSelectedItem().toString();
        String soDienThoai = txtSoDienThoai.getText().trim();
        String diaChi = txtDiaChi.getText().trim();
        String chucVu = cbChucVu.getSelectedItem().toString();
        String nguoiQuanLySelected = cbNguoiQuanLy.getSelectedItem() != null ? cbNguoiQuanLy.getSelectedItem().toString() : "";
        System.out.println(nguoiQuanLySelected);
        // 3. Kiểm tra logic nghiệp vụ
        if (soDienThoai.length() != 10 || !soDienThoai.matches("\\d{10}")) {
            JOptionPane.showMessageDialog(this, "Số điện thoại phải có 10 chữ số.", "Lỗi định dạng", JOptionPane.ERROR_MESSAGE);
            return;
        }

        double luongCoBan;
        try {
            luongCoBan = Double.parseDouble(txtLuongCoBan.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Lương cơ bản phải là một con số.", "Lỗi định dạng", JOptionPane.ERROR_MESSAGE);
            return;
        }
        System.out.println(chucVu.trim().equals("Quản lý nhân sự") || chucVu.trim().equals("Quản lý kho và bếp"));
//        System.out.println(chucVu.trim().equals("Quản lý nhân sự") || chucVu.trim().equals("Quản lý kho và bếp"));
        Integer maQuanLy = null;
        if (!chucVu.trim().equals("Quản lý nhân sự") && !chucVu.trim().equals("Quản lý kho và bếp")) {
            if (nguoiQuanLySelected.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Nhân viên phải có người quản lý.", "Lỗi logic", JOptionPane.ERROR_MESSAGE);
                return;
            }
            for (NhanVien nv : layDuLieu.getDsNhanVien()) {
                if (nv.getHoTen().trim().equals(nguoiQuanLySelected.trim())) {
                    maQuanLy = nv.getMaNhanVien();
                    break;
                }
            }
            if (maQuanLy == null) {
                JOptionPane.showMessageDialog(this, "Không tìm thấy người quản lý được chọn.", "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } else if(chucVu.trim().equals("Quản lý nhân sự") || chucVu.trim().equals("Quản lý kho và bếp")){ 
            System.out.println(!nguoiQuanLySelected.isEmpty());
            if (!nguoiQuanLySelected.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Một Quản lý không có người quản lý.", "Lỗi logic", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        String sql = "{call sp_ThemNhanVien(?, ?, ?, ?, ?, ?, ?, ?)}"; 
        try (Connection conn = CRUD.ConnectSQL.getConnection(); 
             CallableStatement cs = conn.prepareCall(sql)) {

            cs.setString(1, hoTen);
            cs.setString(2, strNgaySinh);
            cs.setString(3, gioiTinh);
            cs.setString(4, soDienThoai);
            cs.setString(5, diaChi);
            cs.setString(6, chucVu);
            if (maQuanLy == null) {
                cs.setNull(7, java.sql.Types.INTEGER);
            } else {
                cs.setInt(7, maQuanLy);
            }
            cs.setDouble(8, luongCoBan);

            cs.execute();
            JOptionPane.showMessageDialog(this, "Thêm nhân viên thành công!");
            layDuLieu();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi thêm nhân viên: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
        
        // 4. Thực thi thêm vào cơ sở dữ liệu
//        Connection conn = null;
//        try {
//            conn = ConnectSQL.getConnection();
//            conn.setAutoCommit(false);
//
//            String checkSdtSql = "SELECT COUNT(*) FROM NHANVIEN WHERE soDienThoai = ?";
//            try (PreparedStatement checkStmt = conn.prepareStatement(checkSdtSql)) {
//                checkStmt.setString(1, soDienThoai);
//                ResultSet rs = checkStmt.executeQuery();
//                if (rs.next() && rs.getInt(1) > 0) {
//                    JOptionPane.showMessageDialog(this, "Số điện thoại đã tồn tại trong hệ thống.", "Lỗi trùng lặp", JOptionPane.ERROR_MESSAGE);
//                    conn.rollback(); // Hủy transaction
//                    return;
//                }
//            }
//
//            // Thêm nhân viên mới
//            String insertSql = "INSERT INTO NHANVIEN (hoTen, ngaySinh, gioiTinh, soDienThoai, diaChi, chucVu, maQuanLy, luongCoBan) VALUES(?, ?, ?, ?, ?, ?, ?, ?)";
//            try (PreparedStatement insertStmt = conn.prepareStatement(insertSql)) {
//                insertStmt.setString(1, hoTen);
//                insertStmt.setString(2, strNgaySinh);
//                insertStmt.setString(3, gioiTinh);
//                insertStmt.setString(4, soDienThoai);
//                insertStmt.setString(5, diaChi);
//                insertStmt.setString(6, chucVu);
//                if (maQuanLy == null) {
//                    insertStmt.setNull(7, java.sql.Types.INTEGER);
//                } else {
//                    insertStmt.setInt(7, maQuanLy);
//                }
//                insertStmt.setDouble(8, luongCoBan);
//
//                int rowsInserted = insertStmt.executeUpdate();
//                if (rowsInserted > 0) {
//                    conn.commit(); // Xác nhận transaction
//                    JOptionPane.showMessageDialog(this, "Thêm nhân viên thành công!");
//                    layDuLieu(); // Tải lại dữ liệu để cập nhật bảng
//                } else {
//                    conn.rollback(); // Hủy transaction nếu không có dòng nào được thêm
//                    JOptionPane.showMessageDialog(this, "Thêm nhân viên thất bại.", "Lỗi CSDL", JOptionPane.ERROR_MESSAGE);
//                }
//            }
//        } catch (SQLException ex) {
//            if (conn != null) {
//                try {
//                    conn.rollback();
//                } catch (SQLException e) {
//                    Logger.getLogger(tabQuanLyNhanVien.class.getName()).log(Level.SEVERE, "Lỗi khi rollback", e);
//                }
//            }
//            JOptionPane.showMessageDialog(this, "Lỗi SQL: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
//            Logger.getLogger(tabQuanLyNhanVien.class.getName()).log(Level.SEVERE, null, ex);
//        } finally {
//            if (conn != null) {
//                try {
//                    conn.setAutoCommit(true);
//                    conn.close();
//                } catch (SQLException e) {
//                    Logger.getLogger(tabQuanLyNhanVien.class.getName()).log(Level.SEVERE, "Lỗi khi đóng kết nối", e);
//                }
//            }
//        }

    }//GEN-LAST:event_btnThemNhanVienActionPerformed

    private void btnXoaNhanVienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaNhanVienActionPerformed
        // TODO add your handling code here:
        //
        selectedRow = tableNhanVien.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một nhân viên để xóa.", "Chưa chọn nhân viên", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this,
            "Bạn có chắc chắn muốn xóa nhân viên này?\nHành động này không thể hoàn tác.",
            "Xác nhận xóa", JOptionPane.YES_NO_OPTION);

        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        int maNV = Integer.parseInt(model.getValueAt(selectedRow, 0).toString());
        String sql = "{call sp_XoaNhanVien(?)}"; 
        try (Connection conn = CRUD.ConnectSQL.getConnection(); 
             CallableStatement cs = conn.prepareCall(sql)) {

            cs.setInt(1, maNV);

            cs.execute();
            JOptionPane.showMessageDialog(this, "Xóa nhân viên thành công!");
            layDuLieu();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi xóa nhân viên: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
//        Connection conn = null;
//        try {
//            conn = ConnectSQL.getConnection();
//            conn.setAutoCommit(false);
//
//            String checkHoaDonSql = "SELECT COUNT(*) FROM HOADON WHERE maNhanVienLap = ?";
//            try (PreparedStatement ps = conn.prepareStatement(checkHoaDonSql)) {
//                ps.setInt(1, maNV);
//                ResultSet rs = ps.executeQuery();
//                if (rs.next() && rs.getInt(1) > 0) {
//                    JOptionPane.showMessageDialog(this, "Không thể xóa nhân viên này vì đã có lịch sử lập hóa đơn.", "Xóa bị chặn", JOptionPane.ERROR_MESSAGE);
//                    conn.rollback();
//                    return;
//                }
//            }
//
//            String checkPhieuNhapSql = "SELECT COUNT(*) FROM PHIEUNHAPHANG WHERE maNhanVienNhap = ?";
//            try (PreparedStatement ps = conn.prepareStatement(checkPhieuNhapSql)) {
//                ps.setInt(1, maNV);
//                ResultSet rs = ps.executeQuery();
//                if (rs.next() && rs.getInt(1) > 0) {
//                    JOptionPane.showMessageDialog(this, "Không thể xóa nhân viên này vì đã có lịch sử nhập hàng.", "Xóa bị chặn", JOptionPane.ERROR_MESSAGE);
//                    conn.rollback();
//                    return;
//                }
//            }
//
//            // 2. Cập nhật nhân viên cấp dưới (nếu nhân viên bị xóa là quản lý)
//            // Đặt maQuanLy của các nhân viên cấp dưới thành NULL
//            String updateSubordinatesSql = "UPDATE NHANVIEN SET maQuanLy = NULL WHERE maQuanLy = ?";
//            try (PreparedStatement ps = conn.prepareStatement(updateSubordinatesSql)) {
//                ps.setInt(1, maNV);
//                ps.executeUpdate();
//            }
//
//            // 3. Xóa các bản ghi phụ thuộc
//            // Xóa tài khoản
//            String deleteTaiKhoanSql = "DELETE FROM TAIKHOAN WHERE maNhanVien = ?";
//            try (PreparedStatement ps = conn.prepareStatement(deleteTaiKhoanSql)) {
//                ps.setInt(1, maNV);
//                ps.executeUpdate();
//            }
//
//            // Xóa các bảng phụ khác nếu có (ví dụ: NHANVIEN_CALAMVIEC, PHIEUTHONGKE)
//            String deleteCaLamViecSql = "DELETE FROM NHANVIEN_CALAMVIEC WHERE MaNhanVien = ?";
//            try (PreparedStatement ps = conn.prepareStatement(deleteCaLamViecSql)) {
//                ps.setInt(1, maNV);
//                ps.executeUpdate();
//            }
//
//            String deletePhieuThongKeSql = "DELETE FROM PHIEUTHONGKE WHERE MaNhanVien = ?";
//            try (PreparedStatement ps = conn.prepareStatement(deletePhieuThongKeSql)) {
//                ps.setInt(1, maNV);
//                ps.executeUpdate();
//            }
//
//            // 4. Cuối cùng, xóa nhân viên khỏi bảng NHANVIEN
//            String deleteNhanVienSql = "DELETE FROM NHANVIEN WHERE MaNhanVien = ?";
//            try (PreparedStatement ps = conn.prepareStatement(deleteNhanVienSql)) {
//                ps.setInt(1, maNV);
//                int rowsDeleted = ps.executeUpdate();
//                if (rowsDeleted > 0) {
//                    conn.commit(); // Xác nhận toàn bộ transaction
//                    JOptionPane.showMessageDialog(this, "Xóa nhân viên thành công!");
//                    layDuLieu(); // Tải lại dữ liệu
//                } else {
//                    conn.rollback(); // Hủy bỏ nếu có lỗi
//                    JOptionPane.showMessageDialog(this, "Không tìm thấy nhân viên để xóa.", "Lỗi", JOptionPane.ERROR_MESSAGE);
//                }
//            }
//
//        } catch (SQLException ex) {
//            if (conn != null) {
//                try {
//                    conn.rollback();
//                } catch (SQLException e) {
//                    Logger.getLogger(tabQuanLyNhanVien.class.getName()).log(Level.SEVERE, "Lỗi khi rollback", e);
//                }
//            }
//            JOptionPane.showMessageDialog(this, "Lỗi SQL khi xóa: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
//            Logger.getLogger(tabQuanLyNhanVien.class.getName()).log(Level.SEVERE, null, ex);
//        } finally {
//            if (conn != null) {
//                try {
//                    conn.setAutoCommit(true);
//                    conn.close();
//                } catch (SQLException e) {
//                    Logger.getLogger(tabQuanLyNhanVien.class.getName()).log(Level.SEVERE, "Lỗi khi đóng kết nối", e);
//                }
//            }
//        }
    }//GEN-LAST:event_btnXoaNhanVienActionPerformed

    private void btnSuaNhanVienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaNhanVienActionPerformed

        //
        selectedRow = tableNhanVien.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một nhân viên để cập nhật!", "Chưa chọn nhân viên", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // 1. Kiểm tra đầu vào
        if (!checked()) {
            JOptionPane.showMessageDialog(this, "Yêu cầu nhập đầy đủ và chính xác thông tin!", "Lỗi đầu vào", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int maNhanVien = Integer.parseInt(model.getValueAt(selectedRow, 0).toString());
        String hoTen = txtHoTen.getText().trim();
        java.util.Date ngaySinhUtil = txtNgaySinh.getDate();
        String strNgaySinh = new java.sql.Date(ngaySinhUtil.getTime()).toString();
        String gioiTinh = cbGioiTinh.getSelectedItem().toString();
        String soDienThoai = txtSoDienThoai.getText().trim();
        String diaChi = txtDiaChi.getText().trim();
        String chucVu = cbChucVu.getSelectedItem().toString();
        String nguoiQuanLySelected = cbNguoiQuanLy.getSelectedItem() != null ? cbNguoiQuanLy.getSelectedItem().toString() : "";

        
        if (soDienThoai.length() != 10 || !soDienThoai.matches("\\d{10}")) {
            JOptionPane.showMessageDialog(this, "Số điện thoại phải có 10 chữ số.", "Lỗi định dạng", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int luongCoBan;
        try {
            luongCoBan = Integer.parseInt(txtLuongCoBan.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Lương cơ bản phải là một con số.", "Lỗi định dạng", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Integer maQuanLy = null;
        if (!chucVu.trim().equals("Quản lý")) {
            if (nguoiQuanLySelected.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Nhân viên phải có người quản lý.", "Lỗi logic", JOptionPane.ERROR_MESSAGE);
                return;
            }
            for (NhanVien nv : layDuLieu.getDsNhanVien()) {
                if (nv.getHoTen().trim().equals(nguoiQuanLySelected.trim())) {
                    maQuanLy = nv.getMaNhanVien();
                    break;
                }
            }
        }

        if(maQuanLy != null && maQuanLy == maNhanVien) {
            JOptionPane.showMessageDialog(this, "Nhân viên không thể tự quản lý chính mình.", "Lỗi logic", JOptionPane.ERROR_MESSAGE);
            return;
        }

            
        String sql = "{call sp_SuaNhanVien(?, ?, ?, ?, ?, ?, ?, ?, ?)}"; 
        try (Connection conn = CRUD.ConnectSQL.getConnection(); 
             CallableStatement cs = conn.prepareCall(sql)) {

            cs.setString(1, hoTen);
            cs.setString(2, strNgaySinh);
            cs.setString(3, gioiTinh);
            cs.setString(4, soDienThoai);
            cs.setString(5, diaChi);
            cs.setString(6, chucVu);
            if (maQuanLy == null) {
                cs.setNull(7, java.sql.Types.INTEGER);
            } else {
                cs.setInt(7, maQuanLy);
            }
            cs.setDouble(8, luongCoBan);
            cs.setInt(9, maNhanVien);

            cs.execute();
            JOptionPane.showMessageDialog(this, "Cập nhật thông tin nhân viên thành công!");
            layDuLieu();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
//        // 4. Thực thi cập nhật vào CSDL
//        Connection conn = null;
//        try {
//            conn = ConnectSQL.getConnection();
//            conn.setAutoCommit(false); // Bắt đầu transaction
//
//            // Kiểm tra SĐT trùng lặp (loại trừ chính nhân viên đang sửa)
//            String checkSdtSql = "SELECT COUNT(*) FROM NHANVIEN WHERE soDienThoai = ? AND MaNhanVien != ?";
//            try (PreparedStatement checkStmt = conn.prepareStatement(checkSdtSql)) {
//                checkStmt.setString(1, soDienThoai);
//                checkStmt.setInt(2, maNhanVien);
//                ResultSet rs = checkStmt.executeQuery();
//                if (rs.next() && rs.getInt(1) > 0) {
//                    JOptionPane.showMessageDialog(this, "Số điện thoại đã tồn tại ở một nhân viên khác.", "Lỗi trùng lặp", JOptionPane.ERROR_MESSAGE);
//                    conn.rollback();
//                    return;
//                }
//            }
//
//            String updateSql = "UPDATE NHANVIEN SET hoTen = ?, ngaySinh = ?, gioiTinh = ?, soDienThoai = ?, diaChi = ?, chucVu = ?, maQuanLy = ?, luongCoBan = ? WHERE MaNhanVien = ?";
//            try (PreparedStatement updateStmt = conn.prepareStatement(updateSql)) {
//                updateStmt.setString(1, hoTen);
//                updateStmt.setString(2, strNgaySinh);
//                updateStmt.setString(3, gioiTinh);
//                updateStmt.setString(4, soDienThoai);
//                updateStmt.setString(5, diaChi);
//                updateStmt.setString(6, chucVu);
//                if (maQuanLy == null) {
//                    updateStmt.setNull(7, java.sql.Types.INTEGER);
//                } else {
//                    updateStmt.setInt(7, maQuanLy);
//                }
//                updateStmt.setDouble(8, luongCoBan);
//                updateStmt.setInt(9, maNhanVien);
//
//                int rowsUpdated = updateStmt.executeUpdate();
//                if (rowsUpdated > 0) {
//                    conn.commit();
//                    JOptionPane.showMessageDialog(this, "Cập nhật thông tin nhân viên thành công!");
//                    layDuLieu(); // Tải lại dữ liệu để cập nhật bảng
//                } else {
//                    conn.rollback();
//                    JOptionPane.showMessageDialog(this, "Cập nhật thất bại. Không tìm thấy nhân viên.", "Lỗi", JOptionPane.ERROR_MESSAGE);
//                }
//            }
//        } catch (SQLException ex) {
//            if (conn != null) try { conn.rollback(); } catch (SQLException e) {}
//            JOptionPane.showMessageDialog(this, "Lỗi SQL khi cập nhật: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
//            Logger.getLogger(tabQuanLyNhanVien.class.getName()).log(Level.SEVERE, null, ex);
//        } finally {
//            if (conn != null) try { conn.close(); } catch (SQLException e) {}
//        }
    }//GEN-LAST:event_btnSuaNhanVienActionPerformed

    private void btnLamMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLamMoiActionPerformed
        // TODO add your handling code here:
        txtHoTen.setText("");
        cbGioiTinh.setSelectedIndex(0);
        txtNgaySinh.setDate(null);
        txtDiaChi.setText("");
        txtSoDienThoai.setText("");
        cbChucVu.setSelectedIndex(0);
        cbNguoiQuanLy.setSelectedIndex(0);
        txtLuongCoBan.setText("");
        layDuLieu();
    }//GEN-LAST:event_btnLamMoiActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLamMoi;
    private javax.swing.JButton btnSuaNhanVien;
    private javax.swing.JButton btnThemNhanVien;
    private javax.swing.JButton btnXoaNhanVien;
    private javax.swing.JComboBox<String> cbChucVu;
    private javax.swing.JComboBox<String> cbGioiTinh;
    private javax.swing.JComboBox<String> cbNguoiQuanLy;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnChucNang;
    private javax.swing.JPanel pnThongTinNhanVien;
    private javax.swing.JTable tableNhanVien;
    private javax.swing.JTextField txtDiaChi;
    private javax.swing.JTextField txtHoTen;
    private javax.swing.JTextField txtLuongCoBan;
    private com.toedter.calendar.JDateChooser txtNgaySinh;
    private javax.swing.JTextField txtSoDienThoai;
    // End of variables declaration//GEN-END:variables
}
